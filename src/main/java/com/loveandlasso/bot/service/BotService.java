package com.loveandlasso.bot.service;

import com.loveandlasso.bot.constant.BotConstants;
import com.loveandlasso.bot.constant.MessageTemplates;
import com.loveandlasso.bot.dto.CozeApiResponse;
import com.loveandlasso.bot.dto.PaymentRequest;
import com.loveandlasso.bot.dto.PaymentResponse;
import com.loveandlasso.bot.keyboard.InlineKeyboardFactory;
import com.loveandlasso.bot.model.SubscriptionType;
import com.loveandlasso.bot.model.User;
import com.loveandlasso.bot.repository.UserRepository;
import lombok.Getter;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Optional;

import static com.loveandlasso.bot.constant.BotConstants.*;
import static com.loveandlasso.bot.constant.MessageTemplates.*;

@Service
public class BotService {

    private final UserRepository userRepository;
    private final CozeApiService cozeApiService;
    private final SubscriptionService subscriptionService;
    private final PaymentService paymentService;

    @Value("${payment.yukassa.returnUrl}")
    private String returnUrl;

    @Autowired
    public BotService(UserRepository userRepository,
                      CozeApiService cozeApiService,
                      SubscriptionService subscriptionService,
                      PaymentService paymentService) {
        this.userRepository = userRepository;
        this.cozeApiService = cozeApiService;
        this.subscriptionService = subscriptionService;
        this.paymentService = paymentService;
    }

    public BotResponse processMessage(@NotNull Update update) {

        if (!update.hasMessage() || !update.getMessage().hasText()) {
            return new BotResponse(MessageTemplates.ERROR_MESSAGE);
        }

        String messageText = update.getMessage().getText();

        User user = registerUserIfNeeded(update);
        user.setLastActivity(LocalDateTime.now());
        userRepository.save(user);

        if (isMenuButton(messageText)) {
            return handleMenuButton(messageText, user);
        }

        if (BotConstants.DIALOG_SUBSCRIPTION.equals(user.getDialogState()) && !isMenuButton(messageText)) {
            try {
                String apiResponse = processRegularMessage(messageText, user);
                user.setDialogState(BotConstants.DIALOG_MAIN);
                user.setSelectedPlan(null);
                user.setLastActivity(LocalDateTime.now());
                userRepository.save(user);

                return new BotResponse(apiResponse);

            } catch (Exception e) {
                user.setDialogState(BotConstants.DIALOG_MAIN);
                user.setSelectedPlan(null);
                user.setLastActivity(LocalDateTime.now());
                userRepository.save(user);
                System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: " + e.getMessage());
                return new BotResponse("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }

        String apiResponse = null;
        String additionalHint = "";

        String currentState = user.getDialogState();
        if (currentState != null) {
            switch (currentState) {
                case BotConstants.DIALOG_SUBSCRIPTION ->
                        additionalHint = "\n\nüìù <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –º–µ–Ω—é –≤—ã—à–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º.";
                case BotConstants.DIALOG_PLAN_DETAILS -> {
                    if ("test".equals(user.getSelectedPlan())) {
                        additionalHint = "\n\nüìù <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –í—ã–±–µ—Ä–∏—Ç–µ '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞, –µ—Å–ª–∏ –í—ã –∏–º –µ—â–µ –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å";
                    } else {
                        additionalHint = "\n\nüìù <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å'.";
                    }
                }
                case BotConstants.DIALOG_PAYMENT ->
                        additionalHint = "\n\nüí≥ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
                case BotConstants.DIALOG_AWAITING_MESSAGE -> {
                    user.setDialogState(BotConstants.DIALOG_MAIN);
                    userRepository.save(user);
                }
                default -> {
                }
                // –î–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            }
        }

        try {
            apiResponse = processRegularMessage(messageText, user);
        } catch (Exception e) {

            return new BotResponse("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }

        String finalResponse = "";
        if (apiResponse != null && !apiResponse.trim().isEmpty()) {
            finalResponse = apiResponse;
        } else {
            finalResponse = "ü§ñ –ü–æ–ª—É—á–µ–Ω –≤–∞—à –∑–∞–ø—Ä–æ—Å, –Ω–æ –æ—Ç–≤–µ—Ç –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤.";
        }

        if (!additionalHint.isEmpty()) {
            finalResponse += additionalHint;
        }

        return new BotResponse(finalResponse);
    }

    public BotResponse processCallbackQuery(@NotNull CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        User user = getUserFromCallback(callbackQuery);

        user.setLastActivity(LocalDateTime.now());
        userRepository.save(user);

        if (InlineKeyboardFactory.CALLBACK_TEST_MODE.equals(callbackData)) {
            return new BotResponse(activateTestPlan(user));
        }
        if (InlineKeyboardFactory.CALLBACK_HELP_MODE.equals(callbackData)) {
            return new BotResponse(activateTestPlan(user));
        }
        if (InlineKeyboardFactory.CALLBACK_CONTACT.equals(callbackData)) {
            return new BotResponse("–î–ª—è —Å–≤—è–∑–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Estreman");
        }
        if (InlineKeyboardFactory.CALLBACK_START_DIALOG.equals(callbackData)) {
            user.setAwaitingResponse(true);
            userRepository.save(user);

            try {
                String presetMessage = "–ü—Ä–∏–≤–µ—Ç! –¢—ã –∫—Ç–æ –∏ —á—Ç–æ –¥–µ–ª–∞–µ—à—å?";
                CozeApiResponse cozeResponse = cozeApiService.sendRequest(presetMessage, user);
                boolean successful = cozeApiService.isValidResponse(cozeResponse);
                Integer tokenCount = successful && cozeResponse.getUsage() != null
                        ? cozeResponse.getUsage().getTotalTokens()
                        : null;

                subscriptionService.logUsage(user, presetMessage, null, successful, tokenCount);

                user.setAwaitingResponse(false);
                user.setDialogState(BotConstants.DIALOG_MAIN);
                userRepository.save(user);

                if (!successful) {
                    return new BotResponse(MessageTemplates.API_ERROR);
                }

                return new BotResponse(cozeApiService.extractResponseText(cozeResponse));
            } catch (Exception e) {
                user.setAwaitingResponse(false);
                userRepository.save(user);
                return new BotResponse("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }

        if (InlineKeyboardFactory.CALLBACK_PREV.equals(callbackData)) {
            String currentPlan = user.getSelectedPlan();
            String prevPlan = getPreviousPlan(currentPlan);
            user.setSelectedPlan(prevPlan);
            userRepository.save(user);

            if (prevPlan.equals("test")) {
                return new BotResponse(
                        TARIFF_INFO +
                                getPlanDetailsMessage(prevPlan),
                        InlineKeyboardFactory.createNavigationWithPaymentForFreeKeyboard()
                );
            } else {
                return new BotResponse(
                        TARIFF_INFO +
                                getPlanDetailsMessage(prevPlan),
                        InlineKeyboardFactory.createNavigationWithPaymentKeyboard()
                );
            }


        }

        if (InlineKeyboardFactory.CALLBACK_NEXT.equals(callbackData)) {
            String currentPlan = user.getSelectedPlan();
            String nextPlan = getNextPlan(currentPlan);
            user.setSelectedPlan(nextPlan);
            userRepository.save(user);

            if (nextPlan.equals("test")) {
                return new BotResponse(
                        TARIFF_INFO +
                                getPlanDetailsMessage(nextPlan),
                        InlineKeyboardFactory.createNavigationWithPaymentForFreeKeyboard()
                );
            } else {
                return new BotResponse(
                        TARIFF_INFO +
                                getPlanDetailsMessage(nextPlan),
                        InlineKeyboardFactory.createNavigationWithPaymentKeyboard()
                );
            }
        }

        if (InlineKeyboardFactory.CALLBACK_PAY.equals(callbackData)) {
            String selectedPlan = user.getSelectedPlan();
            if (selectedPlan != null) {
                user.setDialogState(BotConstants.DIALOG_PAYMENT);
                userRepository.save(user);
                return new BotResponse(getPaymentMessage(selectedPlan, user));
            } else {
                return new BotResponse("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.");
            }
        }

        return new BotResponse("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
    }

    public String processRegularMessage(String message, User user) {
        if (subscriptionService.isDailyLimitExceeded(user)) {
            return MessageTemplates.LIMIT_REACHED;
        }

        user.setAwaitingResponse(true);
        userRepository.save(user);

        CozeApiResponse cozeResponse = cozeApiService.sendRequest(message, user);

        boolean successful = cozeApiService.isValidResponse(cozeResponse);
        Integer tokenCount = successful && cozeResponse.getUsage() != null
                ? cozeResponse.getUsage().getTotalTokens()
                : null;

        subscriptionService.logUsage(user, message, null, successful, tokenCount);

        user.setAwaitingResponse(false);
        userRepository.save(user);

        if (!successful) {
            return MessageTemplates.API_ERROR;
        }

        return cozeApiService.extractResponseText(cozeResponse);
    }

    private boolean isMenuButton(@NotNull String messageText) {

        return  messageText.equals("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è") ||
                messageText.equals("üíº –ü–æ–¥–ø–∏—Å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã") ||
                messageText.contains("\uD83D\uDD27 –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞") ||
                messageText.equals("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å") ||
                messageText.equals("/start");
    }

    private BotResponse handleMenuButton(String messageText, User user) {
        switch (messageText) {
            case "/start" -> {
                user.setDialogState(BotConstants.DIALOG_MAIN);
                user.setSelectedPlan(null);
                userRepository.save(user);
                return new BotResponse(
                        String.format(
                                MessageTemplates.WELCOME_MESSAGE,
                                user.getFirstName()),
                        InlineKeyboardFactory.createTestModeKeyboard()
                );
            }

            case "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" -> {
                return new BotResponse(MessageTemplates.INSTRUCTION_INFO);
            }
            case "üíº –ü–æ–¥–ø–∏—Å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã" -> {
                user.setDialogState(BotConstants.DIALOG_SUBSCRIPTION);
                user.setSelectedPlan("test"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∫–∞–∫ "test"
                userRepository.save(user);

                return new BotResponse(
                        "\uD83D\uDC49 <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–∞–π–ø—ã! ‚¨ÖÔ∏è ‚û°Ô∏è</b>\n\n" + MessageTemplates.FREE_INFO,
                        InlineKeyboardFactory.createNavigationWithPaymentForFreeKeyboard(),
                        true
                );
            }
            case "\uD83D\uDD27 –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "?" -> {
                return new BotResponse(
                        String.format(
                                HELP_MESSAGE,
                                user.getFirstName()),
                        InlineKeyboardFactory.createHelpKeyboard());

            }
            case "üìû –°–≤—è–∑–∞—Ç—å—Å—è" -> {
                return new BotResponse("–î–ª—è —Å–≤—è–∑–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Estreman");
            }
            case "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" -> {
                return new BotResponse(getProfileMessage(user));
            }
            case "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" -> {
                return new BotResponse(activateTestPlan(user));
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
            default -> throw new IllegalStateException("Unexpected value: " + user.getDialogState());
        }
    }

    private String getPlanDetailsMessage(@NotNull String planType) {
        return switch (planType) {
            case "romantic" -> MessageTemplates.ROMANTIC_INFO;
            case "alpha" -> MessageTemplates.ALFA_INFO;
            case "lovelace" -> MessageTemplates.LOVELACE_INFO;
            case "test" -> MessageTemplates.FREE_INFO;
            default -> MessageTemplates.ERROR_MESSAGE;
        };
    }

    @NotNull
    @Contract(pure = true)
    private String getNextPlan(@NotNull String currentPlan) {
        return switch (currentPlan) {
            case "test" -> "romantic";
            case "romantic" -> "alpha";
            case "alpha" -> "lovelace";
            default -> "test";
        };
    }

    @NotNull
    @Contract(pure = true)
    private String getPreviousPlan(@NotNull String currentPlan) {
        return switch (currentPlan) {
            case "test" -> "lovelace";
            case "lovelace" -> "alpha";
            case "alpha" -> "romantic";
            default -> "test";
        };
    }

    private String activateTestPlan(User user) {
        try {
            if (user == null) {
                return "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.";
            }

            if (subscriptionService == null) {
                throw new RuntimeException("SubscriptionService is null");
            }

            if (subscriptionService.hasUserUsedTestPlan(user)) {
                return TEST_ACTIVATE_EARLIER;
            }

            subscriptionService.createTestSubscription(user);

            user.setDialogState(BotConstants.DIALOG_MAIN);
            user.setSelectedPlan(null);

            if (userRepository == null) {
                throw new RuntimeException("UserRepository is null");
            }

            userRepository.save(user);

            return MessageTemplates.TEST_ACTIVATE;

        } catch (Exception e) {

            return TEST_ACTIVATE_ERROR;
        }
    }

    private String getPaymentMessage(String planType, User user) {
        if (planType == null) {
            return "–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –≤—ã–±—Ä–∞–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞.";
        }

        if ("test".equals(planType)) {
            return activateTestPlan(user);
        }

        SubscriptionType subscriptionType;
        double amount;
        String planDisplayName;
        String requests;

        switch (planType) {
            case "romantic" -> {
                subscriptionType = SubscriptionType.ROMANTIC;
                amount = ROMANTIC_PRICE_MONTHLY;
                planDisplayName = "–†–æ–º–∞–Ω—Ç–∏–∫ üíé";
                requests = String.valueOf(ROMANTIC_REQUESTS_PER_DAY);
            }
            case "alpha" -> {
                subscriptionType = SubscriptionType.ALPHA;
                amount = ALPHA_PRICE_MONTHLY;
                planDisplayName = "–ê–ª—å—Ñ–∞—á üî∑";
                requests = String.valueOf(ALPHA_REQUESTS_PER_DAY);
            }
            case "lovelace" -> {
                subscriptionType = SubscriptionType.LOVELACE;
                amount = LOVELACE_PRICE_MONTHLY;
                planDisplayName = "–õ–æ–≤–µ–ª–∞—Å üëë";
                requests = "–ë–µ–∑–ª–∏–º–∏—Ç";
            }
            default -> {
                return MessageTemplates.ERROR_MESSAGE;
            }
        }

        PaymentRequest paymentRequest = PaymentRequest.builder()
                .userId(user.getTelegramId())
                .amount(amount)
                .currency("RUB")
                .description("–ü–æ–¥–ø–∏—Å–∫–∞ " + planDisplayName + " - 1 –º–µ—Å—è—Ü")
                .subscriptionType(subscriptionType)
                .returnUrl(returnUrl)
                .build();

        PaymentResponse paymentResponse = paymentService.createPayment(paymentRequest);

        if (paymentResponse == null) {
            return PAY_FAILED;
        }

        user.setCurrentPaymentId(paymentResponse.getId());
        userRepository.save(user);

        user.setDialogState(BotConstants.DIALOG_MAIN);
        user.setSelectedPlan(null);
        userRepository.save(user);

        return "üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ " + planDisplayName.toUpperCase() + "</b>\n\n" +
                "üì¶ <b>–¢–∞—Ä–∏—Ñ:</b> " + planDisplayName + "\n" +
                "‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> 1 –º–µ—Å—è—Ü\n" +
                "üí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> " + String.format("%.0f", amount) + "‚ÇΩ\n" +
                "‚ö° <b>–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å:</b> " + requests + "\n\n" +
                "üîó <b>–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</b>\n" +
                paymentResponse.getPaymentUrl() + "\n\n" +
                "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n" +
                "üí° –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.";
    }

    @Transactional
    public User registerUserIfNeeded(@NotNull Update update) {
        org.telegram.telegrambots.meta.api.objects.User telegramUser = update.getMessage().getFrom();
        Long telegramId = telegramUser.getId();

        Optional<User> userOptional = userRepository.findByTelegramId(telegramId);

        if (userOptional.isPresent()) {
            return userOptional.get();
        }

        User newUser = User.builder()
                .telegramId(telegramId)
                .firstName(telegramUser.getFirstName())
                .lastName(telegramUser.getLastName())
                .username(telegramUser.getUserName())
                .registeredAt(LocalDateTime.now())
                .lastActivity(LocalDateTime.now())
                .active(true)
                .awaitingResponse(false)
                .dialogState(BotConstants.DIALOG_MAIN)
                .selectedPlan(null)
                .build();

        return userRepository.save(newUser);
    }

    private User getUserFromCallback(@NotNull CallbackQuery callbackQuery) {
        Long userId = callbackQuery.getFrom().getId();
        return userRepository.findByTelegramId(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }

    @NotNull
    private String getProfileMessage(User user) {
        var activeSubscription = subscriptionService.getActiveSubscription(user);
        if (activeSubscription.isPresent()) {
            var subscription = activeSubscription.get();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

            if (subscription.getType() == SubscriptionType.LOVELACE) {
                return String.format(
                        MessageTemplates.PROFILE_MESSAGE_UNLIMITED,
                        user.getFirstName(),
                        user.getRegisteredAt().format(formatter),
                        subscription.getType().getDisplayName(),
                        subscription.getEndDate().format(formatter)
                );
            } else {
                return String.format(
                        MessageTemplates.PROFILE_MESSAGE,
                        user.getFirstName(),
                        user.getRegisteredAt().format(formatter),
                        subscription.getType().getDisplayName(),
                        subscriptionService.getRemainingRequests(user),
                        subscription.getRequestsPerDay(),
                        subscription.getEndDate().format(formatter)
                );
            }

        } else {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
            return String.format(
                    MessageTemplates.PROFILE_NO_SUBSCRIPTION,
                    user.getFirstName(),
                    user.getRegisteredAt().format(formatter),
                    subscriptionService.getRemainingRequests(user),
                    BotConstants.FREE_REQUESTS_PER_DAY
            );
        }
    }

    public static class BotResponse {
        @Getter
        private final String text;

        @Getter
        private final InlineKeyboardMarkup inlineKeyboard;
        private final boolean removeReplyKeyboard;

        public BotResponse(String text) {
            this(text, null, false);
        }

        public BotResponse(String text, InlineKeyboardMarkup inlineKeyboard) {
            this(text, inlineKeyboard, false);
        }

        public BotResponse(String text, InlineKeyboardMarkup inlineKeyboard, boolean removeReplyKeyboard) {
            this.text = text;        this.inlineKeyboard = inlineKeyboard;
            this.removeReplyKeyboard = removeReplyKeyboard;
        }

        public boolean shouldRemoveReplyKeyboard() {
            return removeReplyKeyboard;
        }

        public boolean hasInlineKeyboard() {
            return inlineKeyboard != null;
        }
    }

}