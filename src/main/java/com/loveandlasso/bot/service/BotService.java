package com.loveandlasso.bot.service;

import com.loveandlasso.bot.constant.BotConstants;
import com.loveandlasso.bot.constant.MessageTemplates;
import com.loveandlasso.bot.controller.ApplicationContextProvider;
import com.loveandlasso.bot.controller.TelegramBotController;
import com.loveandlasso.bot.dto.CozeApiResponse;
import com.loveandlasso.bot.dto.PaymentRequest;
import com.loveandlasso.bot.dto.PaymentResponse;
import com.loveandlasso.bot.keyboard.InlineKeyboardFactory;
import com.loveandlasso.bot.keyboard.MainMenuKeyboard;
import com.loveandlasso.bot.model.SubscriptionType;
import com.loveandlasso.bot.model.User;
import com.loveandlasso.bot.repository.UserRepository;
import jakarta.annotation.PreDestroy;
import lombok.Getter;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Iterator;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.*;
import java.util.function.Consumer;

import static com.loveandlasso.bot.constant.BotConstants.*;
import static com.loveandlasso.bot.constant.MessageTemplates.*;

@Service
public class BotService {

    private final UserRepository userRepository;
    private final CozeApiService cozeApiService;
    private final SubscriptionService subscriptionService;
    private final PaymentService paymentService;

    @Value("${payment.yukassa.returnUrl}")
    private String returnUrl;

    // –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∫–∏ —Ä–∞–∑–±–∏—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    private final Map<Long, MessageAssembler> messageAssemblers = new ConcurrentHashMap<>();
    private static final Logger log = LoggerFactory.getLogger(TelegramBotController.class);
    private static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(5);

    private static final long PART_WAIT_TIMEOUT = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
    private static final long MAX_ASSEMBLY_TIME = 60000; // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º –Ω–∞ —Å–±–æ—Ä–∫—É

    private static class MessageAssembler {
        private final StringBuilder fullMessage = new StringBuilder();
        private final Long userId;
        private final Consumer<MessageAssembler> completeHandler;
        private ScheduledFuture<?> processingTask;
        private final long assemblyStartTime;
        private long lastPartTime;
        private int partsCount = 0;
        private boolean isAssembling = true;

        MessageAssembler(Long userId, Consumer<MessageAssembler> completeHandler) {
            this.userId = userId;
            this.completeHandler = completeHandler;
            this.assemblyStartTime = System.currentTimeMillis();
            this.lastPartTime = assemblyStartTime;
        }

        synchronized void addPart(String part) {
            if (!isAssembling) {
                log.warn("Ignoring part - assembly already completed for user {}", userId);
                return;
            }

            long now = System.currentTimeMillis();
            partsCount++;

            // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –∫ –ø–æ–ª–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            if (fullMessage.length() > 0) {
                fullMessage.append(" "); // –ü—Ä–æ–±–µ–ª –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
            }
            fullMessage.append(part.trim());
            lastPartTime = now;

            log.info("üì• Part #{} received for user {}: length={}, total_length={}",
                    partsCount, userId, part.length(), fullMessage.length());
            log.debug("Part content: [{}]", part);

            // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (processingTask != null) {
                processingTask.cancel(false);
            }

            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            long delay = calculateDelay(now);
            processingTask = scheduler.schedule(this::tryComplete, delay, TimeUnit.MILLISECONDS);

            log.info("‚è∞ Scheduled completion check for user {} in {}ms", userId, delay);
        }
        private long calculateDelay(long now) {
            long assemblyDuration = now - assemblyStartTime;

            // –ï—Å–ª–∏ —Å–±–æ—Ä–∫–∞ –¥–ª–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            if (assemblyDuration > MAX_ASSEMBLY_TIME) {
                log.warn("‚ö†Ô∏è Force completing due to max assembly time for user {}", userId);
                return 100;
            }

            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–Ω–æ–≥–æ —á–∞—Å—Ç–µ–π - –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            if (partsCount > 3) {
                return 1500;
            }

            // –û–±—ã—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            return PART_WAIT_TIMEOUT;
        }

        private void tryComplete() {
            long now = System.currentTimeMillis();
            long timeSinceLastPart = now - lastPartTime;
            long sessionDuration = now - assemblyStartTime; // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞ –ª–µ—Ç—É

            log.info("üîç tryComplete: user={}, sessionDuration={}ms, parts={}, length={}",
                    userId, sessionDuration, partsCount, fullMessage.length());

            // –î–û–ë–ê–í–õ–Ø–ï–ú –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            boolean forceByTime = sessionDuration > 10000; // 10 —Å–µ–∫—É–Ω–¥
            boolean forceByParts = partsCount >= 4; // 4 –∏–ª–∏ –±–æ–ª—å—à–µ —á–∞—Å—Ç–µ–π
            boolean normalComplete = timeSinceLastPart >= PART_WAIT_TIMEOUT - 100;

            if (forceByTime || forceByParts || normalComplete) {
                if (forceByTime) {
                    log.warn("‚ö° FORCE completing by time for user {}", userId);
                } else if (forceByParts) {
                    log.warn("‚ö° FORCE completing by parts count for user {}", userId);
                } else {
                    log.info("‚úÖ Normal completion for user {}", userId);
                }

                log.info("‚úÖ Triggering completion for user {}: parts={}, length={}",
                        userId, partsCount, fullMessage.length());
                completeHandler.accept(this);
            } else {
                log.info("‚è≥ Not ready yet for user {}, need {}ms more",
                        userId, (PART_WAIT_TIMEOUT - 100) - timeSinceLastPart);
            }
        }

        synchronized String getAssembledMessage() {
            return fullMessage.toString().trim();
        }

        synchronized void markCompleted() {
            isAssembling = false;
            if (processingTask != null) {
                processingTask.cancel(false);
            }
        }

        boolean isAssembling() {
            return isAssembling;
        }

        Long getUserId() {
            return userId;
        }

        int getPartsCount() {
            return partsCount;
        }
    }

    @Autowired
    public BotService(UserRepository userRepository,
                      CozeApiService cozeApiService,
                      SubscriptionService subscriptionService,
                      PaymentService paymentService) {
        this.userRepository = userRepository;
        this.cozeApiService = cozeApiService;
        this.subscriptionService = subscriptionService;
        this.paymentService = paymentService;
    }

    public BotResponse processMessage(@NotNull Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) {
            return new BotResponse(MessageTemplates.ERROR_MESSAGE);
        }

        String messageText = update.getMessage().getText();
        Long userId = update.getMessage().getFrom().getId();

        log.info("üì® Incoming message from user {}: length={}", userId, messageText.length());
        log.debug("Message content: [{}]", messageText);

        User user = registerUserIfNeeded(update);
        user.setLastActivity(LocalDateTime.now());
        userRepository.save(user);

        // –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        if (isMenuButton(messageText)) {
            log.info("üîò Menu command detected, clearing assembler for user {}", userId);
            clearMessageAssembler(userId);
            return handleMenuButton(messageText, user);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        MessageAssembler assembler = messageAssemblers.computeIfAbsent(userId,
                k -> {
                    log.info("üîß Creating new message assembler for user {}", k);
                    return new MessageAssembler(k, this::handleAssembledMessage);
                });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (!assembler.isAssembling()) {
            log.info("üîÑ Previous assembly completed, creating new assembler for user {}", userId);
            clearMessageAssembler(userId);
            assembler = new MessageAssembler(userId, this::handleAssembledMessage);
            messageAssemblers.put(userId, assembler);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –≤ —Å–±–æ—Ä—â–∏–∫
        assembler.addPart(messageText);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç —á—Ç–æ —á–∞—Å—Ç–∏ –ø–æ–ª—É—á–∞—é—Ç—Å—è)
        if (assembler.getPartsCount() == 1) {
            return new BotResponse("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, —Å–æ–±–∏—Ä–∞—é —á–∞—Å—Ç–∏...");
        } else {
            return new BotResponse(String.format("üìù –ü–æ–ª—É—á–µ–Ω–∞ —á–∞—Å—Ç—å %d, —Å–æ–±–∏—Ä–∞—é...", assembler.getPartsCount()));
        }
    }

    public BotResponse processCallbackQuery(@NotNull CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        User user = getUserFromCallback(callbackQuery);

        // –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –∑–∞–º–µ–Ω—è–µ–º clearUserBuffer –Ω–∞ clearMessageAssembler
        clearMessageAssembler(callbackQuery.getFrom().getId());

        user.setLastActivity(LocalDateTime.now());
        userRepository.save(user);

        if (InlineKeyboardFactory.CALLBACK_TEST_MODE.equals(callbackData)) {
            return new BotResponse(activateTestPlan(user));
        }

        if (InlineKeyboardFactory.CALLBACK_HELP_MODE.equals(callbackData)) {
            return new BotResponse(activateTestPlan(user));
        }

        if (InlineKeyboardFactory.CALLBACK_CONTACT.equals(callbackData)) {
            return new BotResponse("–î–ª—è —Å–≤—è–∑–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Estreman");
        }

        if (InlineKeyboardFactory.CALLBACK_START_DIALOG.equals(callbackData)) {
            user.setAwaitingResponse(true);
            userRepository.save(user);

            try {
                String presetMessage = "–ü—Ä–∏–≤–µ—Ç! –¢—ã –∫—Ç–æ –∏ —á—Ç–æ –¥–µ–ª–∞–µ—à—å?";
                String apiResponse = processRegularMessage(presetMessage, user);

                user.setAwaitingResponse(false);
                user.setDialogState(BotConstants.DIALOG_MAIN);
                userRepository.save(user);

                return new BotResponse(apiResponse);

            } catch (Exception e) {
                user.setAwaitingResponse(false);
                userRepository.save(user);
                return new BotResponse("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }

        if (InlineKeyboardFactory.CALLBACK_PREV.equals(callbackData)) {
            String currentPlan = user.getSelectedPlan();
            String prevPlan = getPreviousPlan(currentPlan);
            user.setSelectedPlan(prevPlan);
            userRepository.save(user);

            InlineKeyboardMarkup selectedKeyboard;
            if ("test".equals(user.getSelectedPlan())) {
                selectedKeyboard = InlineKeyboardFactory.createNavigationWithPaymentForFreeKeyboard();
            } else {
                selectedKeyboard = InlineKeyboardFactory.createNavigationWithPaymentKeyboard();
            }

            return new BotResponse(
                    TARIFF_INFO + getPlanDetailsMessage(prevPlan),
                    selectedKeyboard
            );
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ "–í–ø–µ—Ä–µ–¥"
        if (InlineKeyboardFactory.CALLBACK_NEXT.equals(callbackData)) {
            String currentPlan = user.getSelectedPlan();
            String nextPlan = getNextPlan(currentPlan);
            user.setSelectedPlan(nextPlan);
            userRepository.save(user);

            InlineKeyboardMarkup selectedKeyboard;
            if ("test".equals(user.getSelectedPlan())) {
                selectedKeyboard = InlineKeyboardFactory.createNavigationWithPaymentForFreeKeyboard();
            } else {
                selectedKeyboard = InlineKeyboardFactory.createNavigationWithPaymentKeyboard();
            }

            return new BotResponse(
                    TARIFF_INFO + getPlanDetailsMessage(nextPlan),
                    selectedKeyboard
            );
        }

        if (InlineKeyboardFactory.CALLBACK_PAY.equals(callbackData)) {
            String selectedPlan = user.getSelectedPlan();
            if (selectedPlan != null) {
                user.setDialogState(BotConstants.DIALOG_PAYMENT);
                userRepository.save(user);
                return new BotResponse(getPaymentMessage(selectedPlan, user));
            } else {
                return new BotResponse("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.");
            }
        }

        return new BotResponse("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
    }

    private void handleAssembledMessage(MessageAssembler assembler) {
        Long userId = assembler.getUserId();

        log.info("üéØ handleAssembledMessage START for user {}", userId);

        try {
            assembler.markCompleted();
            String assembledMessage = assembler.getAssembledMessage();

            log.info("üéØ === PROCESSING ASSEMBLED MESSAGE ===");
            log.info("User: {}", userId);
            log.info("Parts assembled: {}", assembler.getPartsCount());
            log.info("Final length: {}", assembledMessage.length());
            log.info("Assembled content: [{}]", assembledMessage);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User user = userRepository.findByTelegramId(userId)
                    .orElseThrow(() -> new RuntimeException("User not found: " + userId));

            log.info("üöÄ === SENDING SINGLE REQUEST TO COZE API ===");

            // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í COZE API –û–î–ù–ò–ú –ó–ê–ü–†–û–°–û–ú
            String apiResponse = processRegularMessage(assembledMessage, user);

            log.info("‚úÖ === RECEIVED RESPONSE FROM COZE API ===");
            log.info("Response length: {}", apiResponse.length());

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            sendResponseToUser(userId, apiResponse);

            log.info("üì§ Response sent to user {}", userId);

        } catch (Exception e) {
            log.error("‚ùå Error processing assembled message for user {}", userId, e);
            sendResponseToUser(userId, "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.");
        } finally {
            log.info("üßπ Clearing assembler for user {}", userId);
            // –û—á–∏—â–∞–µ–º —Å–±–æ—Ä—â–∏–∫
            clearMessageAssembler(userId);
        }
    }

    private void sendResponseToUser(Long userId, String response) {
        // –ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —É–ª—É—á—à–∏—Ç—å
        try {
            // –ù—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ TelegramBotController –∏–ª–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
            log.info("üì§ Sending response to user {}: length={}", userId, response.length());

            // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            ApplicationContext context = ApplicationContextProvider.getApplicationContext();
            TelegramBotController botController = context.getBean(TelegramBotController.class);
            botController.sendSimpleMessage(userId, response);

        } catch (Exception e) {
            log.error("‚ùå Failed to send response to user {}", userId, e);
        }
    }

    private void clearMessageAssembler(Long userId) {
        MessageAssembler assembler = messageAssemblers.remove(userId);
        if (assembler != null) {
            log.info("üóëÔ∏è Cleared message assembler for user {}", userId);
            assembler.markCompleted();
        }
    }

    @Scheduled(fixedRate = 30000) // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    public void cleanupExpiredAssemblers() {
        long now = System.currentTimeMillis();
        int cleaned = 0;

        Iterator<Map.Entry<Long, MessageAssembler>> iterator = messageAssemblers.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<Long, MessageAssembler> entry = iterator.next();
            MessageAssembler assembler = entry.getValue();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
            if (now - assembler.assemblyStartTime > MAX_ASSEMBLY_TIME * 2) {
                log.info("üßπ Cleaning up expired assembler for user {}", entry.getKey());
                assembler.markCompleted(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
                iterator.remove();
                cleaned++;
            }
        }

        if (cleaned > 0) {
            log.info("üßπ Cleaned up {} expired message assemblers", cleaned);
        }
    }

    @PreDestroy
    public void shutdown() {
        log.info("üîå Shutting down message assembly scheduler");
        scheduler.shutdown();
        try {
            if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {
                scheduler.shutdownNow();
            }
        } catch (InterruptedException e) {
            scheduler.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }





    public String processRegularMessage(String message, User user) {
        log.info("üî• processRegularMessage START: message_length={}", message.length());

        if (subscriptionService.isDailyLimitExceeded(user)) {
            log.info("‚ö†Ô∏è Daily limit exceeded for user {}", user.getTelegramId());
            return MessageTemplates.LIMIT_REACHED;
        }

        user.setAwaitingResponse(true);
        userRepository.save(user);

        log.info("üöÄ Calling cozeApiService.sendRequest");
        CozeApiResponse cozeResponse = cozeApiService.sendRequest(message, user);
        log.info("‚úÖ Received response from cozeApiService");

        boolean successful = cozeApiService.isValidResponse(cozeResponse);
        Integer tokenCount = successful && cozeResponse.getUsage() != null
                ? cozeResponse.getUsage().getTotalTokens()
                : null;

        String messageForLogging = message.length() > 1000 ?
                message.substring(0, 997) + "..." : message;

        subscriptionService.logUsage(user, messageForLogging, null, successful, tokenCount);

        user.setAwaitingResponse(false);
        userRepository.save(user);

        if (!successful) {
            return MessageTemplates.API_ERROR;
        }

        return cozeApiService.extractResponseText(cozeResponse);
    }

    private boolean isMenuButton(@NotNull String messageText) {
        return  messageText.equals("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è") ||
                messageText.equals("üíº –ü–æ–¥–ø–∏—Å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã") ||
                messageText.contains("\uD83D\uDD27 –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞") ||
                messageText.equals("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å") ||
                messageText.equals("/start");
    }

    private BotResponse handleMenuButton(String messageText, User user) {
        switch (messageText) {
            case "/start" -> {
                user.setDialogState(BotConstants.DIALOG_MAIN);
                user.setSelectedPlan(null);
                userRepository.save(user);
                return new BotResponse(
                        String.format(MessageTemplates.WELCOME_MESSAGE, user.getFirstName()),
                        MainMenuKeyboard.create(),
                        InlineKeyboardFactory.createTestModeKeyboard()
                );
            }

            case "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" -> {
                return new BotResponse(MessageTemplates.INSTRUCTION_INFO);
            }
            case "üíº –ü–æ–¥–ø–∏—Å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã" -> {
                user.setDialogState(BotConstants.DIALOG_SUBSCRIPTION);
                user.setSelectedPlan("test");
                userRepository.save(user);

                return new BotResponse(
                        TARIFF_INFO + MessageTemplates.FREE_INFO,
                        InlineKeyboardFactory.createNavigationWithPaymentForFreeKeyboard(),
                        true
                );
            }
            case "\uD83D\uDD27 –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "?" -> {
                return new BotResponse(
                        String.format(HELP_MESSAGE, user.getFirstName()),
                        InlineKeyboardFactory.createHelpKeyboard());
            }
            case "üìû –°–≤—è–∑–∞—Ç—å—Å—è" -> {
                return new BotResponse("–î–ª—è —Å–≤—è–∑–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Estreman");
            }
            case "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" -> {
                return new BotResponse(getProfileMessage(user));
            }
            case "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" -> {
                return new BotResponse(activateTestPlan(user));
            }

            default -> throw new IllegalStateException("Unexpected value: " + user.getDialogState());
        }
    }

    private String getPlanDetailsMessage(@NotNull String planType) {
        return switch (planType) {
            case "romantic" -> MessageTemplates.ROMANTIC_INFO;
            case "alpha" -> MessageTemplates.ALFA_INFO;
            case "lovelace" -> MessageTemplates.LOVELACE_INFO;
            case "test" -> MessageTemplates.FREE_INFO;
            default -> MessageTemplates.ERROR_MESSAGE;
        };
    }

    @NotNull
    @Contract(pure = true)
    private String getNextPlan(@NotNull String currentPlan) {
        return switch (currentPlan) {
            case "test" -> "romantic";
            case "romantic" -> "alpha";
            case "alpha" -> "lovelace";
            default -> "test";
        };
    }

    @NotNull
    @Contract(pure = true)
    private String getPreviousPlan(@NotNull String currentPlan) {
        return switch (currentPlan) {
            case "test" -> "lovelace";
            case "lovelace" -> "alpha";
            case "alpha" -> "romantic";
            default -> "test";
        };
    }

    private String activateTestPlan(User user) {
        try {
            if (user == null) {
                return "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.";
            }

            if (subscriptionService == null) {
                throw new RuntimeException("SubscriptionService is null");
            }

            if (subscriptionService.hasUserUsedTestPlan(user)) {
                return TEST_ACTIVATE_EARLIER;
            }

            subscriptionService.createTestSubscription(user);

            user.setDialogState(BotConstants.DIALOG_MAIN);
            user.setSelectedPlan(null);

            if (userRepository == null) {
                throw new RuntimeException("UserRepository is null");
            }

            userRepository.save(user);

            return MessageTemplates.TEST_ACTIVATE;

        } catch (Exception e) {
            return TEST_ACTIVATE_ERROR;
        }
    }

    private String getPaymentMessage(String planType, User user) {
        if (planType == null) {
            return "–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –≤—ã–±—Ä–∞–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞.";
        }

        if ("test".equals(planType)) {
            return activateTestPlan(user);
        }

        SubscriptionType subscriptionType;
        double amount;
        String planDisplayName;
        String requests;

        switch (planType) {
            case "romantic" -> {
                subscriptionType = SubscriptionType.ROMANTIC;
                amount = ROMANTIC_PRICE_MONTHLY;
                planDisplayName = "–†–æ–º–∞–Ω—Ç–∏–∫ üíé";
                requests = String.valueOf(ROMANTIC_REQUESTS_PER_DAY);
            }
            case "alpha" -> {
                subscriptionType = SubscriptionType.ALPHA;
                amount = ALPHA_PRICE_MONTHLY;
                planDisplayName = "–ê–ª—å—Ñ–∞—á üî∑";
                requests = String.valueOf(ALPHA_REQUESTS_PER_DAY);
            }
            case "lovelace" -> {
                subscriptionType = SubscriptionType.LOVELACE;
                amount = LOVELACE_PRICE_MONTHLY;
                planDisplayName = "–õ–æ–≤–µ–ª–∞—Å üëë";
                requests = "–ë–µ–∑–ª–∏–º–∏—Ç";
            }
            default -> {
                return MessageTemplates.ERROR_MESSAGE;
            }
        }

        PaymentRequest paymentRequest = PaymentRequest.builder()
                .userId(user.getTelegramId())
                .amount(amount)
                .currency("RUB")
                .description("–ü–æ–¥–ø–∏—Å–∫–∞ " + planDisplayName + " - 1 –º–µ—Å—è—Ü")
                .subscriptionType(subscriptionType)
                .returnUrl(returnUrl)
                .build();

        PaymentResponse paymentResponse = paymentService.createPayment(paymentRequest);

        if (paymentResponse == null) {
            return PAY_FAILED;
        }

        user.setCurrentPaymentId(paymentResponse.getId());
        userRepository.save(user);

        user.setDialogState(BotConstants.DIALOG_MAIN);
        user.setSelectedPlan(null);
        userRepository.save(user);

        return "üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ " + planDisplayName.toUpperCase() + "</b>\n\n" +
                "üì¶ <b>–¢–∞—Ä–∏—Ñ:</b> " + planDisplayName + "\n" +
                "‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> 1 –º–µ—Å—è—Ü\n" +
                "üí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> " + String.format("%.0f", amount) + "‚ÇΩ\n" +
                "‚ö° <b>–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å:</b> " + requests + "\n\n" +
                "üîó <b>–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</b>\n" +
                paymentResponse.getPaymentUrl() + "\n\n" +
                "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n" +
                "üí° –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.";
    }

    @Transactional
    public User registerUserIfNeeded(@NotNull Update update) {
        org.telegram.telegrambots.meta.api.objects.User telegramUser = update.getMessage().getFrom();
        Long telegramId = telegramUser.getId();

        Optional<User> userOptional = userRepository.findByTelegramId(telegramId);

        if (userOptional.isPresent()) {
            return userOptional.get();
        }

        User newUser = User.builder()
                .telegramId(telegramId)
                .firstName(telegramUser.getFirstName())
                .lastName(telegramUser.getLastName())
                .username(telegramUser.getUserName())
                .registeredAt(LocalDateTime.now())
                .lastActivity(LocalDateTime.now())
                .active(true)
                .awaitingResponse(false)
                .dialogState(BotConstants.DIALOG_MAIN)
                .selectedPlan(null)
                .build();

        return userRepository.save(newUser);
    }

    private User getUserFromCallback(@NotNull CallbackQuery callbackQuery) {
        Long userId = callbackQuery.getFrom().getId();
        return userRepository.findByTelegramId(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }

    @NotNull
    private String getProfileMessage(User user) {
        var activeSubscription = subscriptionService.getActiveSubscription(user);
        if (activeSubscription.isPresent()) {
            var subscription = activeSubscription.get();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

            if (subscription.getType() == SubscriptionType.LOVELACE) {
                return String.format(
                        MessageTemplates.PROFILE_MESSAGE_UNLIMITED,
                        user.getFirstName(),
                        user.getRegisteredAt().format(formatter),
                        subscription.getType().getDisplayName(),
                        subscription.getEndDate().format(formatter)
                );
            } else {
                return String.format(
                        MessageTemplates.PROFILE_MESSAGE,
                        user.getFirstName(),
                        user.getRegisteredAt().format(formatter),
                        subscription.getType().getDisplayName(),
                        subscriptionService.getRemainingRequests(user),
                        subscription.getRequestsPerDay(),
                        subscription.getEndDate().format(formatter)
                );
            }

        } else {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
            return String.format(
                    MessageTemplates.PROFILE_NO_SUBSCRIPTION,
                    user.getFirstName(),
                    user.getRegisteredAt().format(formatter),
                    subscriptionService.getRemainingRequests(user),
                    BotConstants.FREE_REQUESTS_PER_DAY
            );
        }
    }

    public static class BotResponse {
        @Getter
        private final String text;
        @Getter
        private final InlineKeyboardMarkup inlineKeyboard;
        @Getter
        private final ReplyKeyboardMarkup replyKeyboard;
        private final boolean removeReplyKeyboard;

        public BotResponse(String text) {
            this(text, null, null, false);
        }

        public BotResponse(String text, InlineKeyboardMarkup inlineKeyboard) {
            this(text, inlineKeyboard, null, false);
        }

        public BotResponse(String text, InlineKeyboardMarkup inlineKeyboard, boolean removeReplyKeyboard) {
            this(text, inlineKeyboard, null, removeReplyKeyboard);
        }

        public BotResponse(String text, ReplyKeyboardMarkup replyKeyboard, InlineKeyboardMarkup inlineKeyboard) {
            this(text, inlineKeyboard, replyKeyboard, false);
        }

        public BotResponse(String text, InlineKeyboardMarkup inlineKeyboard, ReplyKeyboardMarkup replyKeyboard, boolean removeReplyKeyboard) {
            this.text = text;
            this.inlineKeyboard = inlineKeyboard;
            this.replyKeyboard = replyKeyboard;
            this.removeReplyKeyboard = removeReplyKeyboard;
        }

        public boolean shouldRemoveReplyKeyboard() {
            return removeReplyKeyboard;
        }

        public boolean hasInlineKeyboard() {
            return inlineKeyboard != null;
        }

        public boolean hasReplyKeyboard() {
            return replyKeyboard != null;
        }
    }
}